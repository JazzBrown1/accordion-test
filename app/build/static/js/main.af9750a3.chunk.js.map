{"version":3,"sources":["Accordian/Accordion.tsx","Accordian/AccordionTab.tsx","Pages/Main/validate.ts","Pages/Main/Details.tsx","Pages/Main/FinalComments.tsx","Pages/Main/MoreComments.tsx","Pages/Main/NetworkError.tsx","Pages/Main/Main.tsx","api/api.ts","Pages/Result/Result.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AccordionContext","createContext","changeOpenSlot","openSlot","addListener","Accordion","children","onChange","slotListenerRef","useRef","className","Provider","value","slotKey","current","listener","defaultProps","undefined","title","onNext","onClose","useContext","isOpen","useEffect","newSlot","role","onKeyPress","e","key","onClick","tabIndex","type","normChars","email","number","validate","firstname","test","length","surname","emailAd","dob","Date","gender","telephone","phonenumber","comments","DetailsTab","onComplete","useState","setFirstName","fnError","setFnError","setSurname","snError","setSnError","setEmail","emError","setEmError","shouldValidate","setShouldValidate","parse","error","PARSE","AccordionTab","newTab","maxLength","target","onBlur","FinalCommentsTab","setComments","commentsError","setCommentsError","MoreCommentsTab","phoneNumber","setPhoneNumber","phoneNumberError","setPhoneNumberError","setGender","genderError","setGenderError","mm","yy","dd","setDob","DOBError","setDOBError","simpleDateToDate","disabled","selected","hidden","oldState","newState","Number","NetworkError","style","position","top","width","color","textAlign","date","setFullYear","Main","sendData","networkError","openTab","setOpenTab","combinedTabDataRef","Details","data","nextTab","details","MoreComments","more","FinalComments","final","sendDetails","a","parsedDate","payload","fetch","method","cache","headers","referrerPolicy","body","JSON","stringify","response","json","console","Results","responseData","Object","entries","map","string","App","setNetworkError","setResponseData","result","Result","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af9750a3.chunk.js","sourcesContent":["import React, { createContext, useRef } from 'react';\r\n\r\nexport type AccordionSlotKey = number | string;\r\n\r\ntype CloseListener = (newSlot: AccordionSlotKey) => void;\r\n\r\nexport interface AccordionContextData {\r\n  changeOpenSlot: (slotKey: AccordionSlotKey) => void;\r\n  openSlot: AccordionSlotKey;\r\n  addListener: (listener: CloseListener) => void\r\n}\r\n\r\nexport const AccordionContext = createContext<AccordionContextData>({\r\n  changeOpenSlot: () => { /* noop */ },\r\n  openSlot: -1,\r\n  addListener: () => { /* noop */ },\r\n});\r\n\r\ninterface AccordionProps {\r\n  children: any,\r\n  openSlot: AccordionSlotKey,\r\n  onChange?: (newSlot: AccordionSlotKey, oldSlot: AccordionSlotKey) => void,\r\n}\r\n\r\n// This component handles the passing of the openSlot state to the different AccordionTabProps#\r\n// and the passes the open click from the trigger tab to the currently open tab\r\n// I chose this approach because it means the tabs can be written completely independatnly\r\n// and all of the parsing/validation can be handled at the tab level - I also made a onChange\r\n// cback available on the Accordion module but its optional and I dont use it in this app\r\n\r\nconst Accordion = ({ children, openSlot, onChange }: AccordionProps) => {\r\n  const slotListenerRef = useRef<CloseListener>(() => {});\r\n\r\n  const changeOpenSlot = (slotKey: AccordionSlotKey) => {\r\n    if (onChange) onChange(slotKey, openSlot);\r\n    slotListenerRef.current(slotKey);\r\n  };\r\n\r\n  // The open tab will use this callback func to attach\r\n  // and it is used to trigger the onClose callback\r\n  const addListener = (listener : CloseListener) => {\r\n    slotListenerRef.current = listener;\r\n  };\r\n\r\n  return (\r\n    <div className=\"accordion-wrapper\">\r\n      <AccordionContext.Provider value={{ openSlot, changeOpenSlot, addListener }}>\r\n        {children}\r\n      </AccordionContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nAccordion.defaultProps = {\r\n  onChange: undefined,\r\n};\r\n\r\nexport default Accordion;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { AccordionContext, AccordionSlotKey } from './Accordion';\r\n\r\ninterface AccordionTabProps {\r\n  children: any,\r\n  title: string,\r\n  slotKey: AccordionSlotKey,\r\n  onNext: () => void;\r\n  onClose: (newSlot: AccordionSlotKey) => void;\r\n}\r\n\r\nconst Accordion = ({\r\n  children, title, slotKey, onNext, onClose,\r\n}: AccordionTabProps) => {\r\n  const { openSlot, changeOpenSlot, addListener } = useContext(AccordionContext);\r\n  const isOpen = openSlot === slotKey;\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      // This is so we can trigger an onclose callback when another component triggers the close\r\n      // we could have passed values through context but this seemed less messy\r\n      addListener((newSlot: AccordionSlotKey) => {\r\n        onClose(newSlot);\r\n      });\r\n    }\r\n  }, [onClose]);\r\n\r\n  return (\r\n    <div className=\"accordion-tab-wrapper\">\r\n      <div\r\n        role=\"button\"\r\n        onKeyPress={(e) => {\r\n          if (e.key === 'Enter' && !isOpen) changeOpenSlot(slotKey);\r\n        }}\r\n        className=\"accordion-tab-title\"\r\n        onClick={() => { if (!isOpen) changeOpenSlot(slotKey); }}\r\n        tabIndex={0}\r\n      >\r\n        <p>{title}</p>\r\n      </div>\r\n      <div className={`accordion-tab-body${isOpen ? ' show' : ''}`}>\r\n        {children}\r\n        <button type=\"button\" className=\"accordion-next-button\" onClick={onNext}>{'Next >'}</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Accordion;\r\n","const normChars = /^[a-z ,.'-]+$/i;\r\nconst email = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nconst number = /^[0-9]*$/;\r\n\r\nconst validate = {\r\n  firstname: (firstname: string): boolean => (\r\n    normChars.test(firstname)\r\n    && firstname.length > 1\r\n    && firstname.length <= 30\r\n  ),\r\n  surname: (surname: string): boolean => (\r\n    normChars.test(surname)\r\n    && surname.length > 1\r\n    && surname.length <= 30\r\n  ),\r\n  email: (emailAd: string): boolean => (\r\n    email.test(emailAd)\r\n    && emailAd.length > 5\r\n    && emailAd.length <= 80\r\n  ),\r\n  dob: (dob: Date | boolean): boolean => (dob instanceof Date),\r\n  gender: (gender: string): boolean => gender === 'M' || gender === 'F',\r\n  telephone: (phonenumber: string): boolean => (\r\n    number.test(phonenumber)\r\n    && phonenumber.length > 1\r\n    && phonenumber.length <= 30\r\n  ),\r\n  comments: (comments: string): boolean => comments.length <= 300,\r\n};\r\n\r\nexport default validate;\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState } from 'react';\r\nimport { AccordionSlotKey } from '../../Accordian/Accordion';\r\nimport AccordionTab from '../../Accordian/AccordionTab';\r\nimport { DetailsTabData } from './Main';\r\nimport PARSE from './validate';\r\n\r\n// Want to add some messages but not sure where to add them on the page\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst ERROR_MESSAGES = {\r\n  firstname: 'First name field must be under 30 characters and contain no special characters',\r\n  surname: 'First name field must be under 30 characters and contain no special characters',\r\n  email: 'First name field must be under 80 characters and contain no special characters',\r\n};\r\n\r\ninterface Props {\r\n  onComplete: (data: DetailsTabData, slot?: AccordionSlotKey) => void\r\n}\r\n\r\nconst DetailsTab = ({ onComplete } : Props) => {\r\n  const [firstname, setFirstName] = useState<string>('');\r\n  const [fnError, setFnError] = useState(false);\r\n  const [surname, setSurname] = useState<string>('');\r\n  const [snError, setSnError] = useState(false);\r\n  const [email, setEmail] = useState<string>('');\r\n  const [emError, setEmError] = useState(false);\r\n  const [shouldValidate, setShouldValidate] = useState(false);\r\n\r\n  // eslint-disable-next-line no-shadow\r\n  const parse = () => {\r\n    let error = false;\r\n    if (!PARSE.firstname(firstname)) {\r\n      setFnError(true);\r\n      error = true;\r\n    } else setFnError(false);\r\n    if (!PARSE.surname(surname)) {\r\n      setSnError(true);\r\n      error = true;\r\n    } else setSnError(false);\r\n    if (!PARSE.email(email)) {\r\n      setEmError(true);\r\n      error = true;\r\n    } else setEmError(false);\r\n    return !error;\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (parse()) onComplete({ firstname, surname, email });\r\n    else setShouldValidate(true);\r\n  };\r\n\r\n  const handleClose = (newTab: AccordionSlotKey) => {\r\n    if (parse()) onComplete({ firstname, surname, email }, newTab);\r\n    else setShouldValidate(true);\r\n  };\r\n\r\n  return (\r\n    <AccordionTab slotKey=\"details\" title=\"Step 1: Your details\" onNext={handleNext} onClose={handleClose}>\r\n\r\n      <label className={`input-label${fnError ? ' error' : ''}`}>\r\n        <p>First Name</p>\r\n        <input\r\n          type=\"text\"\r\n          maxLength={30}\r\n          value={firstname}\r\n          onChange={(e) => { setFirstName(e.target.value); }}\r\n          onBlur={() => { if (shouldValidate) parse(); }}\r\n        />\r\n      </label>\r\n\r\n      <label className={`input-label${snError ? ' error' : ''}`}>\r\n        <p>Surname</p>\r\n        <input\r\n          type=\"text\"\r\n          maxLength={30}\r\n          value={surname}\r\n          onChange={(e) => { setSurname(e.target.value); }}\r\n          onBlur={() => { if (shouldValidate) parse(); }}\r\n        />\r\n      </label>\r\n\r\n      <br />\r\n\r\n      <label className={`input-label${emError ? ' error' : ''}`}>\r\n        <p>Email Address</p>\r\n        <input\r\n          type=\"email\"\r\n          maxLength={80}\r\n          value={email}\r\n          onChange={(e) => { setEmail(e.target.value); }}\r\n          onBlur={() => { if (shouldValidate) parse(); }}\r\n        />\r\n      </label>\r\n\r\n    </AccordionTab>\r\n  );\r\n};\r\n\r\nexport default DetailsTab;\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState } from 'react';\r\nimport { AccordionSlotKey } from '../../Accordian/Accordion';\r\nimport AccordionTab from '../../Accordian/AccordionTab';\r\nimport { FinalTabData } from './Main';\r\nimport PARSE from './validate';\r\n\r\ninterface Props {\r\n  onComplete: (data: FinalTabData, slot?: AccordionSlotKey) => void\r\n}\r\n\r\nconst FinalCommentsTab = ({ onComplete } : Props) => {\r\n  const [comments, setComments] = useState<string>('');\r\n  const [commentsError, setCommentsError] = useState<boolean>(false);\r\n  const [shouldValidate, setShouldValidate] = useState(false);\r\n\r\n  const parse = () => {\r\n    let error = false;\r\n    if (!PARSE.comments(comments)) {\r\n      setCommentsError(true);\r\n      error = true;\r\n    } else setCommentsError(false);\r\n    return !error;\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (parse()) onComplete({ comments });\r\n    else setShouldValidate(true);\r\n  };\r\n\r\n  const handleClose = (newTab: AccordionSlotKey) => {\r\n    if (parse()) onComplete({ comments }, newTab);\r\n    else setShouldValidate(true);\r\n  };\r\n\r\n  return (\r\n    <AccordionTab slotKey=\"final\" title=\"Step 3: Final comments\" onNext={handleNext} onClose={handleClose}>\r\n\r\n      <label className={`input-label${commentsError ? ' error' : ''}`}>\r\n        <p>Comments</p>\r\n        <textarea\r\n          onBlur={() => { if (shouldValidate) parse(); }}\r\n          value={comments}\r\n          onChange={(e) => { setComments(e.target.value); }}\r\n        />\r\n      </label>\r\n\r\n    </AccordionTab>\r\n  );\r\n};\r\n\r\nexport default FinalCommentsTab;\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\n\r\nimport React, { useState } from 'react';\r\nimport { AccordionSlotKey } from '../../Accordian/Accordion';\r\nimport AccordionTab from '../../Accordian/AccordionTab';\r\nimport { MoreTabData, SimpleDate, simpleDateToDate } from './Main';\r\nimport PARSE from './validate';\r\n\r\ninterface Props {\r\n  onComplete: (data: MoreTabData, slot?: AccordionSlotKey) => void\r\n}\r\n\r\nconst MoreCommentsTab = ({ onComplete } : Props) => {\r\n  const [phoneNumber, setPhoneNumber] = useState<string>('');\r\n  const [phoneNumberError, setPhoneNumberError] = useState(false);\r\n  const [gender, setGender] = useState<string>('');\r\n  const [genderError, setGenderError] = useState(false);\r\n  const [dob, setDob] = useState<SimpleDate>({ mm: 0, yy: 0, dd: 0 });\r\n  const [DOBError, setDOBError] = useState(false);\r\n  const [shouldValidate, setShouldValidate] = useState(false);\r\n\r\n  const parse = () => {\r\n    let error = false;\r\n    if (!PARSE.telephone(phoneNumber)) {\r\n      setPhoneNumberError(true);\r\n      error = true;\r\n    } else setPhoneNumberError(false);\r\n    if (!PARSE.gender(gender)) {\r\n      setGenderError(true);\r\n      error = true;\r\n    } else setGenderError(false);\r\n    if (!PARSE.dob(simpleDateToDate(dob))) {\r\n      setDOBError(true);\r\n      error = true;\r\n    } else setDOBError(false);\r\n    return !error;\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (parse()) onComplete({ phoneNumber, gender, dob });\r\n    else setShouldValidate(true);\r\n  };\r\n\r\n  const handleClose = (newTab: AccordionSlotKey) => {\r\n    if (parse()) onComplete({ phoneNumber, gender, dob }, newTab);\r\n    else setShouldValidate(true);\r\n  };\r\n\r\n  return (\r\n    <AccordionTab slotKey=\"more\" title=\"Step 2: More comments\" onNext={handleNext} onClose={handleClose}>\r\n\r\n      <label className={`input-label${phoneNumberError ? ' error' : ''}`}>\r\n        <p>Telephone Number</p>\r\n        <input\r\n          maxLength={30}\r\n          type=\"number\"\r\n          value={phoneNumber}\r\n          onChange={(e) => { setPhoneNumber(e.target.value); }}\r\n          onBlur={() => { if (shouldValidate) parse(); }}\r\n        />\r\n      </label>\r\n\r\n      <label className={`input-label${genderError ? ' error' : ''}`}>\r\n        <p>Gender</p>\r\n        <div className=\"select-wrapper\">\r\n          <span className=\"select-v\">v</span>\r\n          <select\r\n            onBlur={() => { if (shouldValidate) parse(); }}\r\n            onChange={(e) => {\r\n              setGender(e.target.value);\r\n              setGenderError(false);\r\n            }}\r\n            value={gender}\r\n          >\r\n            <option className=\"select-placeholder\" value=\"\" disabled selected hidden>Select Gender</option>\r\n            <option>M</option>\r\n            <option>F</option>\r\n          </select>\r\n        </div>\r\n      </label>\r\n\r\n      <br />\r\n\r\n      <label className={`input-label${DOBError ? ' error' : ''}`}>\r\n        <p>Dob</p>\r\n        <input\r\n          type=\"number\"\r\n          maxLength={2}\r\n          value={dob.dd || ''}\r\n          className=\"dob-input\"\r\n          onBlur={() => { if (shouldValidate) parse(); }}\r\n          onChange={(e) => {\r\n            setDob((oldState) => {\r\n              const newState = { ...oldState };\r\n              newState.dd = Number(e.target.value);\r\n              return newState;\r\n            });\r\n          }}\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          maxLength={2}\r\n          value={dob.mm || ''}\r\n          className=\"dob-input\"\r\n          onBlur={() => { if (shouldValidate) parse(); }}\r\n          onChange={(e) => {\r\n            setDob((oldState) => {\r\n              const newState = { ...oldState };\r\n              newState.mm = Number(e.target.value);\r\n              return newState;\r\n            });\r\n          }}\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          maxLength={4}\r\n          value={dob.yy || ''}\r\n          className=\"dob-input\"\r\n          onBlur={() => { if (shouldValidate) parse(); }}\r\n          onChange={(e) => {\r\n            setDob((oldState) => {\r\n              const newState = { ...oldState };\r\n              newState.yy = Number(e.target.value);\r\n              return newState;\r\n            });\r\n          }}\r\n        />\r\n      </label>\r\n\r\n    </AccordionTab>\r\n  );\r\n};\r\n\r\nexport default MoreCommentsTab;\r\n","import React from 'react';\r\n\r\nconst NetworkError = () => (\r\n  <div\r\n    style={{\r\n      position: 'fixed', top: 20, width: '100%', color: 'red', textAlign: 'center',\r\n    }}\r\n  >\r\n    There was an Error posting your details to the server.\r\n  </div>\r\n);\r\n\r\nexport default NetworkError;\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useRef, useState } from 'react';\r\nimport Accordion, { AccordionSlotKey } from '../../Accordian/Accordion';\r\nimport DetailsTab from './Details';\r\nimport FinalCommentsTab from './FinalComments';\r\nimport MoreCommentsTab from './MoreComments';\r\nimport NetworkError from './NetworkError';\r\n\r\nexport interface DetailsTabData {\r\n  firstname: string,\r\n  surname: string,\r\n  email: string\r\n}\r\n\r\nexport type SimpleDate = {\r\n  dd: number;\r\n  mm: number;\r\n  yy: number;\r\n}\r\n\r\nexport interface MoreTabData {\r\n  phoneNumber: string,\r\n  dob: SimpleDate,\r\n  gender: string,\r\n}\r\n\r\nexport interface FinalTabData {\r\n  comments: string\r\n}\r\n\r\nexport interface CombinedTabData {\r\n  details?: DetailsTabData,\r\n  more?: MoreTabData,\r\n  final?: FinalTabData\r\n}\r\n\r\nexport const simpleDateToDate = ({ mm, yy, dd }: SimpleDate) => {\r\n  if (dd > 31 || dd < 1\r\n    || mm > 12 || mm < 1\r\n    || yy < 1900 || yy > 2021\r\n  ) return false;\r\n  const date = new Date();\r\n  date.setFullYear(yy, mm, dd);\r\n  return date;\r\n};\r\n\r\ninterface Props {\r\n  sendData: (data: CombinedTabData) => void;\r\n  networkError: boolean;\r\n}\r\n\r\nfunction Main({ sendData, networkError } : Props) {\r\n  const [openTab, setOpenTab] = useState<string | number>('details');\r\n  const combinedTabDataRef = useRef<CombinedTabData>({});\r\n\r\n  const detailsOnComplete = (data: DetailsTabData, nextTab?: AccordionSlotKey | undefined) => {\r\n    combinedTabDataRef.current.details = data;\r\n    if (nextTab) setOpenTab(nextTab);\r\n    else setOpenTab('more');\r\n  };\r\n\r\n  const moreOnComplete = (data: MoreTabData, nextTab?: AccordionSlotKey | undefined) => {\r\n    combinedTabDataRef.current.more = data;\r\n    if (nextTab) setOpenTab(nextTab);\r\n    else setOpenTab('final');\r\n  };\r\n\r\n  const finalOnComplete = (data: FinalTabData, nextTab: AccordionSlotKey | undefined) => {\r\n    combinedTabDataRef.current.final = data;\r\n    if (nextTab) setOpenTab(nextTab);\r\n    // If user skips steps they are forced to go back\r\n    else if (!combinedTabDataRef.current.details) setOpenTab('details');\r\n    else if (!combinedTabDataRef.current.more) setOpenTab('more');\r\n    else sendData(combinedTabDataRef.current);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      {networkError ? <NetworkError /> : null}\r\n      <Accordion openSlot={openTab}>\r\n        <DetailsTab onComplete={detailsOnComplete} />\r\n        <MoreCommentsTab onComplete={moreOnComplete} />\r\n        <FinalCommentsTab onComplete={finalOnComplete} />\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import { CombinedTabData, simpleDateToDate } from '../Pages/Main/Main';\r\n\r\nexport interface DetailsPayload {\r\n  firstname: string,\r\n  surname: string,\r\n  email: string,\r\n  dob: string | Date,\r\n  gender: string,\r\n  comments: string,\r\n  telephone: string,\r\n}\r\n\r\nexport interface DetailsResponse {\r\n  firstname: string,\r\n  surname: string,\r\n  email: string,\r\n  dob: string,\r\n  gender: string,\r\n  comments: string,\r\n  telephone: string,\r\n}\r\n\r\nconst sendDetails = async (data: CombinedTabData):Promise<DetailsResponse | false> => {\r\n  // This is all pre parsed this should never happen\r\n  if (!data.details || !data.final || !data.more) return false;\r\n  const parsedDate = simpleDateToDate(data.more.dob);\r\n  if (!parsedDate) return false;\r\n  const payload : DetailsPayload = {\r\n    firstname: data.details.firstname,\r\n    surname: data.details.surname,\r\n    email: data.details.email,\r\n    dob: parsedDate,\r\n    gender: data.more.gender,\r\n    comments: data.final.comments,\r\n    telephone: data.more.phoneNumber,\r\n  };\r\n  try {\r\n    const response = await fetch('/api/saveDetails', {\r\n      method: 'POST',\r\n      cache: 'no-cache',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      referrerPolicy: 'no-referrer',\r\n      body: JSON.stringify(payload),\r\n    });\r\n    if (!response) return false;\r\n    const json:DetailsResponse = await response.json();\r\n    return json;\r\n  } catch (err) {\r\n    // eslint-disable-next-line no-console\r\n    console.error(err);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default sendDetails;\r\n","import React from 'react';\r\nimport { DetailsResponse } from '../../api/api';\r\n\r\nconst Results = ({ responseData } : {responseData: DetailsResponse}) => (\r\n  <div className=\"results\">\r\n    <h2>Great! Thanks for submitting your response!</h2>\r\n\r\n    <div className=\"results-details-list\">\r\n      {Object.entries(responseData).map(([key, string]) => (\r\n        <div className=\"result-line\" key={key}>\r\n          <span className=\"result-details-key\">{key}</span>\r\n          :\r\n          {' '}\r\n          <span className=\"result-details-text\">\r\n            {string}\r\n          </span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Results;\r\n","import React, { useState } from 'react';\nimport sendDetails, { DetailsResponse } from './api/api';\nimport './App.css';\nimport Main, { CombinedTabData } from './Pages/Main/Main';\nimport Results from './Pages/Result/Result';\n\n// App.js will handle the call to server and the\n// page change after completion\n\nfunction App() {\n  const [networkError, setNetworkError] = useState<boolean>(false);\n  const [responseData, setResponseData] = useState<DetailsResponse>();\n\n  const sendData = async (data: CombinedTabData) => {\n    const result = await sendDetails(data);\n    if (result) {\n      setResponseData(result);\n      setNetworkError(false);\n    } else setNetworkError(true);\n  };\n\n  if (responseData) return <Results responseData={responseData} />;\n  return <Main networkError={networkError} sendData={sendData} />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}